
{
  "schema_version": "1.0",
  "type": "soar_playbook",
  "id": "ddos-attack-playbook",
  "name": "DDoS Attack Incident Response Playbook",
  "version": "1.0.0",
  "owner": "SOC Team",
  "created_utc": "2025-10-30T00:00:00Z",
  "tags": ["DDoS", "availability", "network"],
  "mitre_attack": {
    "tactics": ["Impact"],
    "techniques": ["T1498"]
  },
  "severity_default": "high",
  "preconditions": [
    "Anomaly score > {{ context.thresholds.anomaly_score }}",
    "Traffic spike sustained > {{ context.thresholds.duration_sec }} sec",
    "Service availability degraded (SLO breach)"
  ],
  "cec_filter": {
    "event.class": ["network"],
    "event.type": ["ddos", "dos", "traffic_anomaly"],
    "source": ["wazuh", "ids", "nginx", "lb", "cloud"]
  },
  "variables": {
    "THRESHOLD_RPS": 2000,
    "BLOCK_DURATION_MIN": 120,
    "RATE_LIMIT_RPS": 200,
    "TOP_IPS_LIMIT": 100,
    "FIREWALL_PROVIDER": "cloudflare", 
    "AUTO_MODE": false,
    "APPROVER_GROUP": "SOC_L2",
    "TICKET_PROJECT": "SEC",
    "TICKET_TYPE": "Incident"
  },
  "integrations": {
    "prometheus_url": "${env.PROMETHEUS_URL}",
    "cloudflare": {
      "api_token": "${env.CF_API_TOKEN}",
      "zone_id": "${env.CF_ZONE_ID}"
    },
    "pf": {
      "ssh_host": "${env.FW_SSH_HOST}",
      "ssh_user": "${env.FW_SSH_USER}"
    },
    "telegram": {
      "bot_token": "${env.TELEGRAM_BOT_TOKEN}",
      "chat_id": "${env.TELEGRAM_CHAT_ID}"
    },
    "ticketing": {
      "type": "jira",
      "base_url": "${env.JIRA_URL}",
      "user": "${env.JIRA_USER}",
      "api_token": "${env.JIRA_TOKEN}"
    }
  },
  "notifications": {
    "on_start": ["telegram"],
    "on_escalation": ["telegram"],
    "on_close": ["ticket_comment"]
  },
  "human_in_the_loop": [
    {
      "when": "proposed_blocklist_count > 50 || RATE_LIMIT_RPS < 150",
      "required": true,
      "group": "{{ variables.APPROVER_GROUP }}",
      "message": "Aprobar contención: bloquear {{ proposed_blocklist_count }} IPs y rate-limit a {{ variables.RATE_LIMIT_RPS }} rps."
    }
  ],
  "phases": [
    {
      "name": "Identification",
      "step_id": "idn",
      "tasks": [
        {
          "task_id": "idn-1-monitor",
          "title": "Monitor network traffic",
          "action_type": "metrics.query",
          "provider": "prometheus",
          "params": {
            "queries": [
              {
                "name": "rps",
                "expr": "sum(rate(http_requests_total[1m]))"
              },
              {
                "name": "top_ips",
                "expr": "topk(20, sum by (client_ip) (rate(ingress_bytes_total[1m])))"
              }
            ]
          },
          "store_as": {
            "current_rps": "$.metrics.rps",
            "candidate_ips": "$.metrics.top_ips"
          },
          "evidence": ["metrics_snapshot"]
        },
        {
          "task_id": "idn-2-mitigate-script",
          "title": "Run mitigation script",
          "action_type": "script.exec",
          "runtime": "python3",
          "script_path": "scripts/mitigate_ddos.py",
          "args": [
            "--rps", "{{ store.current_rps }}",
            "--ips", "{{ store.candidate_ips | json }}",
            "--limit", "{{ variables.TOP_IPS_LIMIT }}"
          ],
          "store_as": { "proposed_blocklist": "$.output.block_ips" }
        }
      ],
      "exit_condition": "current_rps > variables.THRESHOLD_RPS"
    },
    {
      "name": "Containment",
      "step_id": "cnt",
      "tasks": [
        {
          "task_id": "cnt-1-rate-limit",
          "title": "Implement rate limiting",
          "action_type": "conditional",
          "branches": [
            {
              "when": "variables.FIREWALL_PROVIDER == 'cloudflare'",
              "action_type": "api.call",
              "provider": "cloudflare",
              "endpoint": "zones/{{ integrations.cloudflare.zone_id }}/rate_limits",
              "method": "POST",
              "body": {
                "threshold": "{{ variables.RATE_LIMIT_RPS }}",
                "period": 1,
                "action": { "mode": "challenge" },
                "match": { "request": { "methods": ["GET","POST"] } }
              }
            },
            {
              "when": "variables.FIREWALL_PROVIDER == 'pf'",
              "action_type": "ssh.exec",
              "provider": "pf",
              "command": "pfctl -t ddos_limit -T replace -f /etc/pf.ddos.conf && service pf reload"
            }
          ]
        },
        {
          "task_id": "cnt-2-block-ips",
          "title": "Block malicious IPs",
          "requires_approval": true,
          "approval_ref": "human_in_the_loop[0]",
          "action_type": "conditional",
          "branches": [
            {
              "when": "variables.FIREWALL_PROVIDER == 'cloudflare'",
              "action_type": "api.batch",
              "provider": "cloudflare",
              "endpoint": "zones/{{ integrations.cloudflare.zone_id }}/firewall/access_rules/rules",
              "method": "POST",
              "items_from": "{{ store.proposed_blocklist }}",
              "item_template": {
                "mode": "block",
                "configuration": { "target": "ip", "value": "{{ item }}" },
                "notes": "Auto DDoS containment {{ variables.BLOCK_DURATION_MIN }}m TTL"
              }
            },
            {
              "when": "variables.FIREWALL_PROVIDER == 'pf'",
              "action_type": "ssh.batch",
              "provider": "pf",
              "items_from": "{{ store.proposed_blocklist }}",
              "command_template": "pfctl -t ddos -T add {{ item }}"
            }
          ],
          "ttl_minutes": "{{ variables.BLOCK_DURATION_MIN }}",
          "store_as": { "blocked_ips": "{{ store.proposed_blocklist }}" }
        }
      ]
    },
    {
      "name": "Eradication",
      "step_id": "erd",
      "tasks": [
        {
          "task_id": "erd-1-update-fw",
          "title": "Update firewall rules (persistent)",
          "action_type": "change_request",
          "details": "Actualizar reglas permanentes basadas en IOC recurrentes",
          "ticket": {
            "project": "{{ variables.TICKET_PROJECT }}",
            "type": "{{ variables.TICKET_TYPE }}",
            "summary": "Hardening tras DDoS: reglas persistentes",
            "labels": ["ddos","hardening"]
          }
        },
        {
          "task_id": "erd-2-ddos-service",
          "title": "Enable/Verify DDoS protection service",
          "action_type": "api.call",
          "provider": "cloudflare",
          "endpoint": "zones/{{ integrations.cloudflare.zone_id }}/settings/under_attack_mode",
          "method": "PATCH",
          "body": { "value": "on" }
        }
      ]
    },
    {
      "name": "Recovery",
      "step_id": "rcv",
      "tasks": [
        {
          "task_id": "rcv-1-restore-traffic",
          "title": "Restore normal traffic flow",
          "action_type": "conditional",
          "branches": [
            {
              "when": "variables.FIREWALL_PROVIDER == 'cloudflare'",
              "action_type": "api.call",
              "provider": "cloudflare",
              "endpoint": "zones/{{ integrations.cloudflare.zone_id }}/rate_limits",
              "method": "DELETE",
              "body": null
            },
            {
              "when": "variables.FIREWALL_PROVIDER == 'pf'",
              "action_type": "ssh.exec",
              "provider": "pf",
              "command": "pfctl -t ddos -T flush && service pf reload"
            }
          ]
        },
        {
          "task_id": "rcv-2-monitor",
          "title": "Monitor for additional attacks",
          "action_type": "metrics.query",
          "provider": "prometheus",
          "params": {
            "queries": [
              {
                "name": "rps_after",
                "expr": "sum(rate(http_requests_total[1m]))"
              }
            ]
          },
          "exit_condition": "rps_after < variables.THRESHOLD_RPS"
        }
      ],
      "rollback": [
        {
          "when": "rps_after >= variables.THRESHOLD_RPS",
          "action": "reapply_containment",
          "ref_tasks": ["cnt-1-rate-limit", "cnt-2-block-ips"]
        }
      ]
    },
    {
      "name": "Lessons Learned",
      "step_id": "ll",
      "tasks": [
        {
          "task_id": "ll-1-post-incident",
          "title": "Post-incident review",
          "action_type": "ticket.comment",
          "body": "Cierre y lecciones aprendidas. Adjuntar métricas, lista de IPs y cambios aplicados.",
          "attachments": [
            "{{ evidence.metrics_snapshot }}",
            "{{ store.blocked_ips | json }}"
          ]
        },
        {
          "task_id": "ll-2-update-policies",
          "title": "Update security policies",
          "action_type": "change_request",
          "details": "Actualizar runbook y políticas de rate limiting/alertas",
          "ticket": {
            "project": "{{ variables.TICKET_PROJECT }}",
            "type": "Task",
            "summary": "Actualizar políticas tras DDoS",
            "labels": ["policy","docs"]
          }
        }
      ]
    }
  ],
  "metrics": {
    "track": ["MTTD", "MTTR", "false_positive_rate", "actions_applied", "blocked_ips_count"],
    "anchors": {
      "incident_open": "idn-1-monitor",
      "containment_start": "cnt-1-rate-limit",
      "recovery_start": "rcv-1-restore-traffic",
      "incident_close": "ll-1-post-incident"
    }
  },
  "audit": {
    "log_level": "info",
    "redact_fields": ["api_token", "user", "ssh_user"]
  },
  "simulation": {
    "fixtures": [
      "tests/fixtures/ddos/spike_5k_rps.json",
      "tests/fixtures/ddos/top_ips_20.json"
    ],
    "expected": {
      "containment.applied": true,
      "blocked_ips_count_min": 5
    }
  },
  "notes": "AUTO_MODE=false requiere aprobación HUMANA en contención; al activar AUTO_MODE=true, el flujo continúa sin HITL."
}
