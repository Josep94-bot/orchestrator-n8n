{
  "name": "My workflow 3",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "dos-alert",
        "responseMode": "lastNode",
        "options": {}
      },
      "name": "Webhook (Alert)",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -1008,
        160
      ],
      "id": "435429fb-6878-447b-ae65-4c10a99d9aec",
      "webhookId": "c77ee870-2ee2-47b8-89ee-901643aad696"
    },
    {
      "parameters": {
        "functionCode": "// Normalize + IncidentID + baseline\nconst crypto = require('crypto'); // si tu instancia no permite require, avísame y te doy versión sin crypto\nconst body = items[0].json || {};\n\nconst source_ip = body.source_ip || body.ip || body?.agent?.ip || null;\nconst app_id    = body.app_id || body.app || 'unknown-app';\nconst severity  = String(body.severity || 'medium').toLowerCase();\nconst metric    = body.metric || {};\nmetric.baseline_p95 = Number(metric.baseline_p95 || 1000);\n\nconst tsBucket = Math.floor(Date.now() / (5 * 60 * 1000)); // 5min\nconst key = `${app_id}|${source_ip || 'na'}|${tsBucket}`;\nconst incident_id = crypto.createHash('sha1').update(key).digest('hex');\n\nreturn [{\n  json: { incident_id, source_ip, app_id, severity, metric, original: body }\n}];\n"
      },
      "name": "Normalize + IncidentID",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -752,
        160
      ],
      "id": "e08fb2dd-f42b-42d6-91b3-dc8470c09e28"
    },
    {
      "parameters": {
        "functionCode": "// Dedup con static data (no FS)\nconst store = this.getWorkflowStaticData('global');\nstore.dedup = store.dedup || {};\nconst now = Date.now();\nconst id = $json.incident_id;\n\nlet dedup = false;\nif (store.dedup[id] && (now - store.dedup[id]) < 5 * 60 * 1000) dedup = true;\nstore.dedup[id] = now;\n\n// purge > 60 minutos\nfor (const k of Object.keys(store.dedup)) {\n  if (now - store.dedup[k] > 60 * 60 * 1000) delete store.dedup[k];\n}\n\nreturn [{ json: { ...$json, _dedup_skipped: dedup } }];\n"
      },
      "name": "Dedup",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -512,
        160
      ],
      "id": "273bc3f5-bd49-483b-a22a-d6475b988ac2"
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json._dedup_skipped}}",
              "operation": "isTrue"
            }
          ]
        }
      },
      "name": "Is Duplicate?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        -288,
        160
      ],
      "id": "8c0076da-9ecb-4ca8-918d-24dc5c2fb660"
    },
    {
      "parameters": {
        "options": {}
      },
      "name": "Respond Duplicate",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        -64,
        32
      ],
      "id": "86ae6066-5b79-4d30-b37f-529c73a1c6b4"
    },
    {
      "parameters": {
        "functionCode": "// LLM Router: decide use_llm / fast_path\nconst m = $json.metric || {};\nconst hints = JSON.stringify($json.original||{}).toLowerCase();\nconst rate = Number(m.request_rate||0);\nconst p95 = Number(m.baseline_p95||1000);\nconst x = p95 ? (rate / p95) : 0;\nconst deny = Array.isArray($json._denylist) ? $json._denylist : [];\nconst obvious = (x >= 5) || hints.includes('syn') || hints.includes('udp') || hints.includes('icmp') || ( $json.source_ip && deny.includes($json.source_ip) );\nconst ambiguous = (x < 5) && ( (Number(m['5xx_rate']||0) > 0.2) || hints.includes('promo') || hints.includes('campaign') );\nreturn [{ json: { ...$json, use_llm: Boolean(ambiguous && !obvious), fast_path: Boolean(obvious) } }];"
      },
      "name": "LLM Router",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -64,
        272
      ],
      "id": "34879d54-8975-4968-a2e6-f5c0ed7876ef"
    },
    {
      "parameters": {
        "functionCode": "// MITRE Local Map (0 latencia)\nconst k = (($json.mitre_search_keywords)||[]).join(' ').toLowerCase() + ' ' + (JSON.stringify($json.original||{}).toLowerCase());\nconst out = [];\nif (k.includes('http')) out.push({id:'T1499.001', name:'Endpoint DoS: HTTP Flood', confidence:0.9});\nif (k.includes('syn')) out.push({id:'T1499.004', name:'Endpoint DoS: SYN Flood', confidence:0.9});\nif (k.includes('udp')) out.push({id:'T1499.002', name:'Endpoint DoS: UDP Flood', confidence:0.8});\nif (!out.length) out.push({id:'T1499', name:'Endpoint Denial of Service', confidence:0.6});\nreturn [{ json: { ...$json, mitre_techniques: out, mitre_summary: out.map(x=>x.id).join(', ') } }];"
      },
      "name": "MITRE Local Map",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        176,
        272
      ],
      "id": "1b506ce6-e31f-4a9d-8fb1-329a53f313dc"
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json.use_llm}}",
              "operation": "isTrue"
            }
          ]
        }
      },
      "name": "Use LLM?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        416,
        272
      ],
      "id": "3628994e-786d-431f-884e-22b7c79e7e4c"
    },
    {
      "parameters": {
        "functionCode": "return [{ json: { ...$json, _llm_started: Date.now() } }];"
      },
      "name": "Mark LLM Start",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        640,
        176
      ],
      "id": "aae2e965-a61f-4bd4-bc85-e1d133dbfd17"
    },
    {
      "parameters": {
        "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent",
        "options": {
          "timeout": 40000
        }
      },
      "name": "Gemini (Flash) Triage",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        848,
        176
      ],
      "id": "d724d40e-664a-4a75-8ee2-2144b0788679",
      "notes": "Credencial HTTP Header Auth con Header Name: x-goog-api-key"
    },
    {
      "parameters": {
        "functionCode": "// Parse + Validate JSON; mark end\nconst r = $node[\"Gemini (Flash) Triage\"].json;\nlet payload;\ntry {\n  const txt = r.candidates?.[0]?.content?.parts?.[0]?.text || JSON.stringify(r);\n  payload = JSON.parse(txt);\n} catch (e) {\n  throw new Error('Gemini JSON parse failed');\n}\n// mínimo esquema\nif (!payload.triage || !payload.plan || !Array.isArray(payload.plan.steps) || !payload.mitre || !Array.isArray(payload.mitre.ttpts)) {\n  throw new Error('LLM output not conforming to schema');\n}\nreturn [{ json: { ...$json, llm: payload, _llm_ended: Date.now() } }];"
      },
      "name": "Parse/Validate LLM",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1056,
        176
      ],
      "id": "11b971d9-e8e0-4255-ae05-7590df313fa5"
    },
    {
      "parameters": {
        "functionCode": "// Decide approval: fast_path => false, else llm.needs_approval (default true)\nconst needs = $json.fast_path ? false : ($json.llm?.needs_approval !== false);\nreturn [{ json: { ...$json, needs_approval: needs } }];"
      },
      "name": "Decide Approval",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1056,
        384
      ],
      "id": "a26a20d7-e8e2-4c10-b979-f72333a2d571"
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json.needs_approval}}",
              "operation": "isTrue"
            }
          ]
        }
      },
      "name": "Needs Approval?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1120,
        -96
      ],
      "id": "918b9a3a-86b0-4da8-9374-a101f39ca09f"
    },
    {
      "parameters": {
        "toEmail": "soc-approval@example.com",
        "subject": "Approval: DoS Mitigation {{$json.app_id}} | Pri {{$json.llm.triage.priority || $json.severity}} | FP {{$json.llm.triage.false_positive_score || 'n/a'}}",
        "text": "Priority: {{$json.llm.triage.priority || $json.severity}} | FP: {{$json.llm.triage.false_positive_score || 'n/a'}}\nSteps:\n1) {{ $json.llm.plan.steps[0].action || 'std block TTL 60m' }}\n2) {{ $json.llm.plan.steps[1].action || 'monitor 2xx/5xx' }}\n3) {{ $json.llm.plan.steps[2].action || 'rollback if FP' }}\nApprove: https://TU_N8N/webhook/approve-dos-mitigation?i={{$execution.id}}&id={{$json.incident_id}}\n",
        "options": {}
      },
      "name": "Email Approval",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 1,
      "position": [
        1472,
        224
      ],
      "id": "1ca56ac4-1a29-4775-ae40-e01c466800d0"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "approve-dos-mitigation",
        "responseMode": "lastNode",
        "options": {}
      },
      "name": "Approval Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        1344,
        560
      ],
      "id": "43034085-2874-4acb-8f5b-c9a449a97687",
      "webhookId": "a17cb931-74d6-4c69-a922-3f2168ed71c1"
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "https://your-ticketing.example.com/api/tickets",
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={\n  \"title\": DoS alert - ${$json.app_id} - ${$json.source_ip || 'unknown'},\n  \"description\": Auto ticket. ATT&CK: ${$json.mitre_summary||''},\n  \"priority\": ($json.llm?.triage?.priority) || ($json.severity||'P3'),\n  \"custom_fields\": {\n    \"incident_id\": $json.incident_id,\n    \"mitre\": $json.mitre_summary,\n    \"plan_steps\": $json.llm?.plan?.steps || [],\n    \"siem\": $json.llm?.siem_queries || []\n  }\n}"
      },
      "name": "Create/Update Ticket",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1744,
        -64
      ],
      "id": "96a5294e-3082-4ce1-b727-94fb9cdb108f",
      "notes": "Ajusta URL y payload a tu mesa (Jira/ServiceNow/Zendesk)."
    },
    {
      "parameters": {
        "toEmail": "oncall@example.com",
        "subject": "DoS {{$json.app_id}} | {{$json.llm.triage.priority || $json.severity}} | {{$json.incident_id}}",
        "text": "ATT&CK: {{$json.mitre_summary}}\nPlan (3):\n1) {{ $json.llm.plan.steps[0].action || 'std block TTL 60m' }}\n2) {{ $json.llm.plan.steps[1].action || 'monitor 2xx/5xx' }}\n3) {{ $json.llm.plan.steps[2].action || 'rollback if FP' }}\nTicket creado/actualizado.\n",
        "options": {}
      },
      "name": "Notify On-Call",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 1,
      "position": [
        1760,
        336
      ],
      "id": "d431fd83-e8a0-4015-8f42-038e0af67ae0"
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "https://firewall-api.example.com/blocks",
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={ \"ip\": $json.source_ip, \"reason\": \"n8n DoS block\", \"ttl_minutes\": 60 }"
      },
      "name": "Mitigation: Block (TTL 60m)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1744,
        512
      ],
      "id": "d46f3214-bac2-44d1-aee5-f1a1545be08a",
      "notes": "Ajusta a tu firewall (Forti/PAN/pfSense/ISP)."
    },
    {
      "parameters": {
        "amount": 3600,
        "unit": "seconds"
      },
      "name": "Wait TTL",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [
        1968,
        416
      ],
      "id": "99a66966-da74-4f2c-b27b-9cc9f45be50e",
      "webhookId": "df889982-feb9-4845-9ab4-ae64537fde29"
    },
    {
      "parameters": {
        "requestMethod": "DELETE",
        "url": "https://firewall-api.example.com/blocks",
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={ \"ip\": $json.source_ip }"
      },
      "name": "Mitigation: Unblock",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        2176,
        416
      ],
      "id": "b50f6324-683b-4c80-931c-bba4ad986cea"
    },
    {
      "parameters": {
        "command": "sudo tail -n 5000 /var/log/nginx/access.log > /tmp/irp_{{$json.app_id}}.log && gzip -f /tmp/irp_{{$json.app_id}}.log"
      },
      "name": "Evidence Collector (SSH)",
      "type": "n8n-nodes-base.ssh",
      "typeVersion": 1,
      "position": [
        1744,
        736
      ],
      "id": "1ac9272b-33de-437f-aa72-0a9ff3cc7ce8"
    },
    {
      "parameters": {
        "functionCode": "// Métricas en static data (no FS)\nconst store = this.getWorkflowStaticData('global');\nstore.metrics = store.metrics || [];\n\nconst now = Date.now();\nconst start = new Date($execution.startedAt).getTime();\n\nstore.metrics.push({\n  t: new Date().toISOString(),\n  incident_id: $json.incident_id,\n  app_id: $json.app_id,\n  mttr_ms: now - start,\n  used_llm: $json.use_llm === true,\n  fast_path: $json.fast_path === true,\n  llm_time_ms: ($json._llm_started && $json._llm_ended) ? ($json._llm_ended - $json._llm_started) : 0,\n  priority: $json.llm?.triage?.priority || $json.severity || null,\n  fp_score: $json.llm?.triage?.false_positive_score ?? null,\n  mitre: $json.mitre_summary || null,\n  errors: $json._errors || []\n});\n\nreturn items;\n"
      },
      "name": "Metrics JSONL",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        2400,
        304
      ],
      "id": "a8ac9285-bfae-4e5b-9fac-8b5594319611"
    },
    {
      "parameters": {
        "options": {}
      },
      "name": "Respond OK",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        2624,
        304
      ],
      "id": "3f6bb06b-2aca-4ba1-97e4-1be9695c86d0"
    },
    {
      "parameters": {
        "path": "85a21c3c-36bb-4ace-aa91-488815005e75",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        752,
        320
      ],
      "id": "b8a211e2-3439-40c4-b74d-58479904f819",
      "name": "Webhook",
      "webhookId": "85a21c3c-36bb-4ace-aa91-488815005e75"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook (Alert)": {
      "main": [
        [
          {
            "node": "Normalize + IncidentID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize + IncidentID": {
      "main": [
        [
          {
            "node": "Dedup",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Dedup": {
      "main": [
        [
          {
            "node": "Is Duplicate?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is Duplicate?": {
      "main": [
        [
          {
            "node": "Respond Duplicate",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "LLM Router",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LLM Router": {
      "main": [
        [
          {
            "node": "MITRE Local Map",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MITRE Local Map": {
      "main": [
        [
          {
            "node": "Use LLM?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Use LLM?": {
      "main": [
        [
          {
            "node": "Mark LLM Start",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Decide Approval",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark LLM Start": {
      "main": [
        [
          {
            "node": "Gemini (Flash) Triage",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gemini (Flash) Triage": {
      "main": [
        [
          {
            "node": "Parse/Validate LLM",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse/Validate LLM": {
      "main": [
        [
          {
            "node": "Decide Approval",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Decide Approval": {
      "main": [
        [
          {
            "node": "Email Approval",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Approval Webhook": {
      "main": [
        [
          {
            "node": "Create/Update Ticket",
            "type": "main",
            "index": 0
          },
          {
            "node": "Notify On-Call",
            "type": "main",
            "index": 0
          },
          {
            "node": "Mitigation: Block (TTL 60m)",
            "type": "main",
            "index": 0
          },
          {
            "node": "Evidence Collector (SSH)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create/Update Ticket": {
      "main": [
        [
          {
            "node": "Metrics JSONL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Notify On-Call": {
      "main": [
        [
          {
            "node": "Metrics JSONL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mitigation: Block (TTL 60m)": {
      "main": [
        [
          {
            "node": "Wait TTL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait TTL": {
      "main": [
        [
          {
            "node": "Mitigation: Unblock",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mitigation: Unblock": {
      "main": [
        [
          {
            "node": "Metrics JSONL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Evidence Collector (SSH)": {
      "main": [
        [
          {
            "node": "Metrics JSONL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Metrics JSONL": {
      "main": [
        [
          {
            "node": "Respond OK",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Email Approval": {
      "main": [
        [
          {
            "node": "Respond OK",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1db160bc-f238-4744-9f19-faad5e9f2519",
  "meta": {
    "instanceId": "ecbb43a45eb5ea5ac84f8f96d5a87eb35e9f7a93c7d1e989bbcf2099033bd3a3"
  },
  "id": "L2HQLK6c787FaTtv",
  "tags": []
}